#! /usr/bin/python
# cnetworkmanager: Command Line Interface for NetworkManager
# by: http://en.opensuse.org/User:Mvidner
# license: http://www.gnu.org/licenses/gpl-2.0.html or later

VERSION = "0.3.2"
print "cnetworkmanager %s - Command Line Interface for NetworkManager" % VERSION

norpm = False
import sys
import os
import ConfigParser             # knm config
from optparse import OptionParser
try:
    import dbus
    import dbus.service
    import _dbus_bindings
except:
    print "Install python-1-dbus.rpm"
    norpm = True
import xml.dom.minidom
try:
    import gobject
except:
    # todo - only if loop wanted
    print "Install python-gobject2.rpm"
    norpm = True
# python-gnome.rpm has gconf for nm-applet...
if norpm:
    sys.exit(1)

from dbus.mainloop.glib import DBusGMainLoop
DBusGMainLoop(set_as_default=True)

LOOP = False

bus = dbus.SystemBus()

# FOOC = connection (service) string
# FOOI = interface string
# fooo = object
# fooi = interface
# foopi = property interface
NMC = 'org.freedesktop.NetworkManager'
NMI = NMC
PI = 'org.freedesktop.DBus.Properties'
SSC = "org.freedesktop.NetworkManagerSystemSettings"
USC = "org.freedesktop.NetworkManagerUserSettings"

def introspect(obj):
    ii = dbus.Interface(obj, 'org.freedesktop.DBus.Introspectable')
    print ii.Introspect()

class cNM:
    # TODO: pull them from introspection.xml
    NM_STATE = ["UNKNOWN", "ASLEEP", "CONNECTING", "CONNECTED", "DISCONNECTED",]

    def __init__(self, opath):
	self.opath = opath
        self.nmo = bus.get_object(NMC, self.opath)
        self.nmi = dbus.Interface(self.nmo, NMI)
        self.nmpi = dbus.Interface(self.nmo, PI)

    def SetWifiEnabled(self, v):
        self.nmpi.Set(NMI, "WirelessEnabled", v)

    def SetOnline(self, v):
        self.nmi.Sleep(not v)

    def Dump7(self):
        print "State:", self.NM_STATE[self.nmpi.Get(NMI, "State")]
        print "Wifi enabled:", self.nmpi.Get(NMI, "WirelessEnabled")
        print "Wifi HW enabled:", self.nmpi.Get(NMI, "WirelessHardwareEnabled")
        # self.nmpi.Set(NMI, "WirelessEnabled", True)
        # self.nmi.Sleep(True)

    def Dump6(self):
        print "State:", self.NM_STATE[self.nmi.state()]

    def Dump0(self):
        "Dumps its own info (not owned objects)."

        try:
            dummy = self.nmi.getDevices()
            self.Dump6()
        except:
            self.Dump7()

    def Dump(self):
        self.Dump0()
        if options.dev:
            for device in self.Devices():
                device.Dump()

        if options.actcon:
            print "Active Connections"
            aconns = self.ActiveConnections()
            for aconn in aconns:
                aconn.Dump()

    def Devices(self):
        try:
            opaths = self.nmi.getDevices() # 0.6
        except:
            opaths = self.nmi.GetDevices()
        return map(cDevice, opaths)

    def ListNets(self):
        print "Wifi Networks:"
        for dev in self.Devices():
            dev.ListNets()

    def ActiveConnections(self):
        try:
            aconns = self.nmi.GetActiveConnections() # 0.6
        except:
            aconns = self.nmpi.Get(NMI, "ActiveConnections")
        return map(cActiveConnection, aconns)

    def reply_handler(self, opath):
        print "Connected:", opath

    def err_handler(self, *args):
        print "ERR:", args

    def ActivateConnection(self, conn, device, ap):
        self.nmi.ActivateConnection(USC,
                                    conn.__dbus_object_path__,
                                    device.opath,
                                    ap.opath,
                                    reply_handler=self.reply_handler,
                                    error_handler=self.err_handler,
                                    )

class cActiveConnection:
    def __init__(self, opath):
        self.opath = opath

    def Dump(self):
       print self.opath
       co = bus.get_object(NMC, self.opath)
       copi = dbus.Interface(co, PI)
       for P in ["ServiceName", "Connection", "SharedServiceName", "SharedConnection", "SpecificObject",]:
           print "  %s: %s" % (P, copi.Get(NMI, P))
       devs = copi.Get(NMI, "Devices")
       print "  Devices:"
       for dev in devs:
           print "  ", dev
   
def bitmask_str(map, value):
    ret = []
    for mask, s in map.iteritems():
        if value & mask: ret.append(s)
    return ",".join(ret)


class cDevice:
    def __init__(self, opath):
        self.opath = opath
        self.devo = bus.get_object(NMC, self.opath)
        self.devi = dbus.Interface(self.devo, NMI + ".Device")
        self.devpi = dbus.Interface(self.devo, PI)

    DEVICE_TYPE = ["UNKNOWN", "802_3_ETHERNET", "802_11_WIRELESS",
                   "GSM", "CDMA",]

    def DeviceType(self):
        return self.DEVICE_TYPE[self.devpi.Get(NMI, "DeviceType")]

    def IsWifi(self):
        return self.DeviceType() == "802_11_WIRELESS"

    def APs(self):
        "Only for wifi"

        self.wdevi = dbus.Interface(self.devo, NMI + ".Device.Wireless")
        aps = self.wdevi.GetAccessPoints()
        return map(cAP, aps)

    def ip_str(self, i32):
        ret = []
        ret.append("%d" % (i32 % 256))
        i32 /= 256
        ret.append("%d" % (i32 % 256))
        i32 /= 256
        ret.append("%d" % (i32 % 256))
        i32 /= 256
        ret.append("%d" % (i32 % 256))
        i32 /= 256
        return ".".join(ret)

    def DumpIp4Config(self, opath):
        print "   Ip4Config:", opath
        o = bus.get_object(NMC, opath)
        pi = dbus.Interface(o, PI)
        try:
            for P in ["Address", "Netmask", "Broadcast", "Gateway",]: # beta2?
                print "    %s: %s" % (P, self.ip_str(pi.Get(NMI, P)))
        except:
            print "    Addresses:"
            addrs = pi.Get(NMI, "Addresses")
            for addr in addrs:
                print "     %s/%s via %s" %  tuple(map(self.ip_str, addr))
        hn = pi.Get(NMI, "Hostname")
        print "    Hostname:", hn
        nss = pi.Get(NMI, "Nameservers")
        print "    Nameservers:", " ".join(map(self.ip_str, nss))
        doms = pi.Get(NMI, "Domains")
        print "    Domains:", " ".join(doms)
        nisd = pi.Get(NMI, "NisDomain")
        print "    NisDomain:", nisd
        niss = pi.Get(NMI, "NisServers")
        print "    NisServers:", " ".join(map(self.ip_str, niss))

    NM_DEVICE_CAP = {1: "NM_SUPPORTED", 2: "CARRIER_DETECT",}

    NM_DEVICE_STATE = [
        "UNKNOWN", "UNMANAGED", "UNAVAILABLE", "DISCONNECTED", "PREPARE",
        "CONFIG", "NEED_AUTH", "IP_CONFIG", "ACTIVATED", "FAILED",]
    
    def Dump7(self):
        # "Ip4Config", only for NM_DEVICE_STATE_ACTIVATED
        for P in ["Udi", "Interface", "Driver",]:
            print "  %s: %s" % (P, self.devpi.Get(NMI, P))
        addr = self.devpi.Get(NMI, "Ip4Address")
        print "  Ip4Address:", self.ip_str(addr)
        caps = self.devpi.Get(NMI, "Capabilities")
        print "  Capabilities:", bitmask_str(self.NM_DEVICE_CAP, caps)
        state = self.NM_DEVICE_STATE[self.devpi.Get(NMI, "State")]
        print "  Dev State:", state
        if state == "ACTIVATED":
            self.DumpIp4Config(self.devpi.Get(NMI, "Ip4Config"))

        dt = self.DeviceType()
        print "  Dev Type:", dt
        if dt == "802_3_ETHERNET":
            self.DumpEth()
        elif dt == "802_11_WIRELESS":
            self.DumpWifi()

    def Dump6(self):
        print "  Driver:", self.devi.getDriver()
        props = self.devi.getProperties()
        print "  Self:", props[0]
        print "  Interface:", props[1]
        print "  Type:", self.DEVICE_TYPE[props[2]]
        print "  UDI:", props[3]
        print "  ?4:", props[4]
        print "  ?5:", props[5]
        print "  IP:", props[6]
        print "  Mask:", props[7]
        print "  Bcast:", props[8]
        print "  MAC:", props[9]
        print "  GW:", props[10]
        print "  NS1:", props[11]
        print "  NS2:", props[12]
        print "  ?13:", props[13]
        print "  Strength:", props[14]
        print "  ?15:", props[15]
        print "  ?16:", props[16]
        print "  ?17:", props[17]
        print "  ?18:", props[18]
        print "  Current net:", props[19]
        print "  Seen nets:", " ".join(props[20])
    
    def Dump0(self):
        print "Device:", self.opath
        try:
            a = self.devi.getDriver()
            self.Dump6()
        except dbus.exceptions.DBusException:
            self.Dump7()

    def DumpEth(self):
        for P in ["HwAddress", "Speed", "Carrier"]:
            print "  %s: %s" % (P, self.devpi.Get(NMI, P))


    IW_MODE = ["AUTO", "ADHOC", "INFRA", "MASTER",
               "REPEAT", "SECOND", "MONITOR",]

    NM_802_11_DEVICE_CAP = {1:"CIPHER_WEP40", 2:"CIPHER_WEP104",
                            4:"CIPHER_TKIP", 8:"CIPHER_CCMP",
                            16:"WPA", 32:"RSN",}

    def DumpWifi(self):
        print "  Dev Mode:", self.IW_MODE[self.devpi.Get(NMI, "Mode")]
        wcaps = self.devpi.Get(NMI, "WirelessCapabilities")
        print "  Wifi Capabilities:", bitmask_str(self.NM_802_11_DEVICE_CAP, wcaps)
        for P in ["HwAddress", "Bitrate", "ActiveAccessPoint"]:
            print "  %s: %s" % (P, self.devpi.Get(NMI, P))
        if options.ap:
            print "  Access Points"
            for ap in self.APs():
                ap.Dump()

    def Dump(self):
        self.Dump0()

    def ListNets(self):
        if self.IsWifi():
            for ap in self.APs():
                ap.ListNets()

"""An AP found around us"""
class cAP:
    def __init__(self, opath):
        self.opath = opath
        self.apo = bus.get_object(NMC, self.opath)
        self.appi = dbus.Interface(self.apo, PI)

    def ssid_str(noself, array):
        s = ""
        for b in array:
            s = s + ("%c" % b)
        return s

    def Ssid(self):
        return self.ssid_str(self.appi.Get(NMI, "Ssid"))

    def Strength(self):
        return int(self.appi.Get(NMI, "Strength"))

    NM_802_11_AP_FLAGS = {1: "PRIVACY",}

    NM_802_11_AP_SEC = {
        1: "PAIR_WEP40", 2: "PAIR_WEP104", 4: "PAIR_TKIP", 8: "PAIR_CCMP",
        16: "GROUP_WEP40", 32: "GROUP_WEP104", 64: "GROUP_TKIP",
        128: "GROUP_CCMP", 256: "KEY_MGMT_PSK", 512: "KEY_MGMT_802_1X",}

    def Dump(self):
        print "  AP:", self.opath
        print "    Ssid:", self.Ssid()
        for P in ["Frequency", "HwAddress", "MaxBitrate",]:
            print "    %s: %s" % (P, self.appi.Get(NMI, P))
        print "    Strength:", self.Strength()
        print "    AP Mode:", cDevice.IW_MODE[self.appi.Get(NMI, "Mode")]
        print "    AP Flags:", bitmask_str(self.NM_802_11_AP_FLAGS,
                                           self.appi.Get(NMI, "Flags"))
        print "    AP WPA Flags:", bitmask_str(self.NM_802_11_AP_SEC,
                                               self.appi.Get(NMI, "WpaFlags"))
        print "    AP RSN Flags:", bitmask_str(self.NM_802_11_AP_SEC,
                                               self.appi.Get(NMI, "RsnFlags"))
    
    def ListNets(self):
        mbr = self.appi.Get(NMI, "MaxBitrate") / 1000
        priv = self.appi.Get(NMI, "Flags") != 0
        wpa = self.appi.Get(NMI, "WpaFlags") != 0
        wpa2 = self.appi.Get(NMI, "RsnFlags") != 0
        priv_s = ""
        if priv:
            if not wpa and not wpa2:
                priv_s = priv_s + " WEP"
            if wpa:
                priv_s = priv_s + " WPA"
            if wpa2:
                priv_s = priv_s + " WPA2"
        print "%3d: %s (%dMb%s)" % (self.Strength(), self.Ssid(), mbr, priv_s)

# Settings is overloaded
class cApplet:
    def __init__(self, svc, opath):
        self.svc = svc
        self.opath = opath
        self.so = bus.get_object(self.svc, self.opath)
        self.si = dbus.Interface(self.so, 'org.freedesktop.NetworkManagerSettings')

    def isSystem(self):
        return self.svc == SSC;

    def Dump(self):
        for conn in self.Connections():
            conn.Dump()
        if self.isSystem():
            self.DumpSystem()

    def DumpSystem(self):
        sspi = dbus.Interface(self.so, PI)
        print "Unmanaged Devices"
        umds = sspi.Get(NMI, "UnmanagedDevices")
        for umd in umds:
            print " ", umd
           #  dump_settings_conn(svc, conn) umd?


    def myConnection(self, opath):
        return cConnection(self.svc, opath)

    def Connections(self):
        opaths = self.si.ListConnections()
        return map(self.myConnection, opaths)

class cConnection:
    def __init__(self, svc, opath):
        self.svc = svc
        self.opath = opath
        self.co = bus.get_object(self.svc, self.opath)
        self.ci = dbus.Interface(self.co, 'org.freedesktop.NetworkManagerSettings.Connection')

    def Dump(self):
       print "Conn:", self.opath
       print " Id:", self.ci.GetID()
       settings = self.Settings()
       settings.Dump()

       si = dbus.Interface(self.co, 'org.freedesktop.NetworkManagerSettings.Connection.Secrets')
       security = settings.Security()
       if security != "":
           print " SECRETS:", security
           # TODO merge them
           secrets = cSettings(si.GetSecrets(security,[],False))
           secrets.Dump()

    def Settings(self):
        return cSettings(self.ci.GetSettings())


class cSettings:
    def __init__(self, conmap):
        self.conmap = conmap

    def Type(self):
        return self.conmap["connection"]["type"]

    def GetID(self):
        return self.conmap["connection"]["id"]

    def Security(self):
        try:
            return self.conmap[self.Type()]["security"]
        except KeyError:
            return ""

    def isNet(self, net_name):
        # FIXME also ssid ...
        return self.GetID() == net_name

    # FIXME check spec/NM what to censor
    secrets = dict.fromkeys(["wep-key0", "psk"])

    def ConMap(self):
        "For GetSettings: censor secrets."

        cm = dict()
        for n1, v1 in self.conmap.iteritems():
            cm[n1] = dict()
            for n2, v2 in v1.iteritems():
                cv2 = v2
                if self.secrets.has_key(n2):
                    cv2 = ""
                cm[n1][n2] = cv2
        return cm

    def SecMap(self):
        "For GetSecrets: only secrets."
        s = self.Security()
        r = {
            s: self.conmap[s]
            }
        print "SECMAP", r
        return r

    def Dump(self):
        for n1, v1 in self.conmap.iteritems():
            print " ",n1
            for n2, v2 in v1.iteritems():        
                print "   %s: %s" % (n2, v2)

# just an example, unused  now
hardwired_conmaps = [
    {
        "connection": {
            "id": "onenet",
            "type": "802-11-wireless",
            },
        "802-11-wireless": {
            "ssid": dbus.ByteArray("onenet"),
            "mode": "infrastructure",
            "security": "802-11-wireless-security",
            },
        #  ipv4
        #   method: dhcp
        "802-11-wireless-security": {
            "key-mgmt": "wpa-psk",
            "wep-tx-keyidx": 0,
            "psk": "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", # CENSORED
            },
        },
    {
        'connection': {
            'id': 'frogs',
            'type': '802-11-wireless',
            },
        '802-11-wireless': {
            'ssid': dbus.ByteArray('frogs'),
            'mode': 'infrastructure',
            'security': '802-11-wireless-security',
            },
        '802-11-wireless-security': {
            'key-mgmt': 'none',
            'wep-tx-keyidx': 0,
            'wep-key0': 'aaaaaaaaaaaaaaaaaaaaaaaaaa', # CENSORED
            },
        },
    ]

# server analog of cApplet
class UserSettings(dbus.service.Object):
    # conmaps is a list
    def __init__(self, opath, conmaps):
        dbus.service.Object.__init__(self, bus, opath)
        #print "CONMAPS:", conmaps
        self.conns = map(self.newCon, conmaps)

    counter = 1
    def newCon(self, conmap):
        cpath = "/MyConnection/%d" % self.counter
        self.counter = self.counter + 1
        c = Connection(cpath, conmap)
        self.NewConnection(cpath) # announce it
        return c

    @dbus.service.method(dbus_interface='org.freedesktop.NetworkManagerSettings',
                             in_signature='', out_signature='ao')
    def ListConnections(self):
        return [c.__dbus_object_path__ for c in self.conns]

    #this is for EMITTING a signal, not receiving it
    @dbus.service.signal(dbus_interface='org.freedesktop.NetworkManagerSettings',
                             signature='o')
    def NewConnection(self, opath):
        pass
        #print "signalling newconn:", opath

    def GetByNet(self, net_name):
        "Returns connection, or None"
        for c in self.conns:
            if c.isNet(net_name):
                return c
        return None


# server analog of cConnection
class Connection(dbus.service.Object):
    def __init__(self, opath, conmap):
        dbus.service.Object.__init__(self, bus, opath)
        self.settings = cSettings(conmap)

    @dbus.service.method(dbus_interface='org.freedesktop.NetworkManagerSettings.Connection',
                             in_signature='', out_signature='a{sa{sv}}')
    def GetSettings(self):
        #print "Getting settings:", self. __dbus_object_path__
#        return self.settings.ConMap()
# grr, censoring secrets makes NM complain!?
        return self.settings.conmap

    @dbus.service.method(dbus_interface='org.freedesktop.NetworkManagerSettings.Connection.Secrets',
                             in_signature='sasb', out_signature='a{sa{sv}}')
    def GetSecrets(self, tag, hints, ask):
        # FIXME respect args
        print "Getting secrets:", self.__dbus_object_path__
        return self.settings.SecMap()

    @dbus.service.method(dbus_interface='org.freedesktop.NetworkManagerSettings.Connection',
                             in_signature='', out_signature='s')
    def GetID(self):
        return self.settings.GetID()

    def isNet(self, net_name):
        return self.settings.isNet(net_name)

class ConfigParserKNM:
    "Parse ~/.kde/share/config/knetworkmanagerrc"

    def __init__(self):
        p = ConfigParser.RawConfigParser()
        ok = p.read(os.getenv("HOME") + "/.kde/share/config/knetworkmanagerrc")

        self.conmaps_d = {}
        for s in p.sections():
            path = s.split("_")
            #print path
            if path[0] not in ["Connection", "Notification Messages"]:
                cid = path[1]
                self.conmaps_d.setdefault(cid, {})
                part = path[2]

                values = {}
                for (n, v) in p.items(s):
                    # WTF, Value_ is transfrmed to value_
                    if n[:6]  == "value_":
                        n = n[6:]
                        v = self.ParseValue(v)
                        values[n] = v
                if len(values) != 0: # empty 802-1x confuses NM!?
                    self.conmaps_d[cid].setdefault(part, {})
                    self.conmaps_d[cid][part].update(**values)
                #print "PARSED", cid, part, values

    def ConMaps(self):
        return self.conmaps_d.values()

    def ParseValue(self, v):
        v = eval('"%s"' % v)    # unescape backslashes
        dom = xml.dom.minidom.parseString(v)
        return self.ParseNode(dom.documentElement)

    def ParseNode(self, n):
        t = n.localName
        if t != "list":
            v = self.NodeText(n)

        if t == "string":
            return v
        elif t == "byte":
            return dbus.Byte(int(v))
        elif t == "bool":
            return v == "true"
        elif t == "int32" or t == "uint32":
            return int(v)
        elif t == "list":
            v = []
            c = n.firstChild
            while c != None:
                if c.localName != None: # whitespace
                    v.append(self.ParseNode(c))
                c = c.nextSibling
            return v

    def NodeText(self, n):
        if n.hasChildNodes():
            return n.firstChild.wholeText
        else:
            return ""

def abbr_signal_handler(*args, **kwargs):
    ifc = kwargs["interface"]
    sig = kwargs["member"]
    opath = kwargs["path"]
    line = "SIG %s: %s.%s%s" % (abbrev(opath,"/"), abbrev(ifc,"."), sig, args)
    print line

class Monitor:
    def __init__(self):
        self.amap = {}
        bus.add_signal_receiver(self.abbr_signal_handler,
                        path_keyword="path",
                        interface_keyword="interface",
                        member_keyword="member")

    def abbr_signal_handler(self, *args, **kwargs):
        ifc = kwargs["interface"]
        sig = kwargs["member"]
        opath = kwargs["path"]
        line = "SIG %s: %s.%s%s" % (self.abbrev(opath,"/"),
                                    self.abbrev(ifc,"."),
                                    sig, args)
        print line

    def abbrev(self, s, sep):
        words = s.split(sep)
        words = map (self.a1, words)
        result = sep.join(words)
        if not self.amap.has_key(s):
            print "ABBR %s is %s" % (result, s)
            self.amap[s] = result
        else:
            if self.amap[s] != result:
                print "ABBR COLLISION %s was %s now %s" % (s, self.amap[s], result)
        return result
    
    def a1(self, s):
        try:
            return s[0]
        except:
            return ""

# main

op = OptionParser(version="%prog " + VERSION)
op.add_option("-d", "--dev",
              action="store_true", default=False,
              help="list devices")
op.add_option("-c", "--actcon",
              action="store_true", default=False,
              help="list active connections")
op.add_option("-u", "--usrcon",
              action="store_true", default=False,
              help="list user connection settings (can CRASH nm-applet)")
op.add_option("-s", "--syscon",
              action="store_true", default=False,
              help="list system connection settings")
op.add_option("-a", "--ap",
              action="store_true", default=False,
              help="list found access points")
op.add_option("-n", "--nets",
              action="store_true", default=False,
              help="list found wireless networks")
# TODO http://docs.python.org/lib/optparse-adding-new-types.html
op.add_option("-w", "--wifi",
              choices=["0","1","off","on","no","yes","false","true"],
              metavar="BOOL",
              help="enable or disable wireless")
op.add_option("-o", "--online",
              choices=["0","1","off","on","no","yes","false","true"],
              metavar="BOOL",
              help="enable or disable network at all")

op.add_option("-C", "--connect",
              help="connect to a wireless network NET (using knetworkmanagerrc)",
              metavar="NET")
op.add_option("-m", "--monitor",
              action="store_true", default=False,
              help="loop to show dbus signals")


(options, args) = op.parse_args()

if options.ap:
    options.dev = True
if options.monitor:
    LOOP = True


nmp = '/org/freedesktop/NetworkManager'
nm = cNM(nmp)
if options.dev or options.actcon:
    nm.Dump()

true_choices =  ["1", "on", "yes", "true"]
if options.wifi != None:
    nm.SetWifiEnabled(options.wifi in true_choices)
if options.online != None:
    nm.SetOnline(options.online in true_choices)

if options.nets:
    nm.ListNets()

if options.syscon:
    print "SYSTEM Connections"
    ss = cApplet(SSC, '/org/freedesktop/NetworkManagerSettings')
    ss.Dump()

if options.usrcon:
    print "USER Connections"
    try:
        us = cApplet(USC, '/org/freedesktop/NetworkManagerSettings')
        us.Dump()
    except dbus.exceptions.DBusException, e:
        print e
        if e.get_dbus_name() == "org.freedesktop.DBus.Error.ServiceUnknown":
            print "Applet is not running"

nmo = bus.get_object(NMC, nmp)
nmi = dbus.Interface(nmo, NMI)

if options.connect != None:
    brn = bus.request_name(USC, _dbus_bindings.NAME_FLAG_DO_NOT_QUEUE)
    if brn == _dbus_bindings.REQUEST_NAME_REPLY_EXISTS:
        print "Could not provide settings service, another applet is running"
        sys.exit(1)
    cfg = ConfigParserKNM()
    us = UserSettings("/org/freedesktop/NetworkManagerSettings",
                      cfg.ConMaps())

def Connect(wanted_net):  # any. or take arg. net is config name or ssid name
    #  ... in general, look for string in all config data. ssid for wifi, whatever for dialup
    # TODO also respect autoconnect

    # ActivateConn wants setting device ap; can find device from ap? ap is "specific" for wifi devices
    #print "Connection wanted to", wanted_net
    found_con = found_ap = found_dev = None
    for dev in nm.Devices():
      if dev.IsWifi():
	for ap in dev.APs():
	    if wanted_net == ap.Ssid():
		found_ap = ap
		found_dev = dev
		break # FIXME both loops
    found_con = us.GetByNet(wanted_net)
    if found_ap == None:
	print "No AP found with SSID", wanted_net
        return False
    elif found_con == None:
        print "No settings for net", wanted_net
        return False
    else:
	nm.ActivateConnection(found_con, found_dev, found_ap) # TODO async
	# TODO run loop, exit it when we have serviced the required calls
        return True

if options.connect != None:
    if Connect(options.connect):
        LOOP = True

if options.monitor:
    m = Monitor()

def loop():
    loop = gobject.MainLoop()
    try:
        loop.run()
    except:
        print "Loop exited"

if LOOP:
    loop()
